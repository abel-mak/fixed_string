"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[708],{5629:function(t,e,n){n.r(e),n.d(e,{contentTitle:function(){return p},default:function(){return _},frontMatter:function(){return u},metadata:function(){return m},toc:function(){return h}});var r=n(7462),i=n(3366),a=(n(7294),n(3905)),s=n(1848),o=n(8330),c=n(6354),d=n(6213),l=["components"],u={sidebar_position:7,sidebar_label:"c_str"},p="fixstr::basic_fixed_string::c_str",m={unversionedId:"api/member-functions/c_str",id:"api/member-functions/c_str",isDocsHomePage:!1,title:"fixstr::basic_fixed_string::c_str",description:"Returns a pointer to a null-terminated character array with data equivalent to those stored in the string.",source:"@site/docs/api/member-functions/c_str.mdx",sourceDirName:"api/member-functions",slug:"/api/member-functions/c_str",permalink:"/fixed_string/docs/api/member-functions/c_str",editUrl:"https://github.com/unterumarmung/fixed_string/edit/add-documentation/documentation/docs/api/member-functions/c_str.mdx",version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7,sidebar_label:"c_str"},sidebar:"tutorialSidebar",previous:{title:"back",permalink:"/fixed_string/docs/api/member-functions/back"},next:{title:"empty",permalink:"/fixed_string/docs/api/member-functions/empty"}},h=[{value:"Parameters",id:"parameters",children:[]},{value:"Return value",id:"return-value",children:[]},{value:"Complexity",id:"complexity",children:[]},{value:"Example",id:"example",children:[]}],f={toc:h};function _(t){var e=t.components,n=(0,i.Z)(t,l);return(0,a.kt)("wrapper",(0,r.Z)({},f,n,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"fixstrbasic_fixed_stringc_str"},(0,a.kt)("inlineCode",{parentName:"h1"},"fixstr::basic_fixed_string::c_str")),(0,a.kt)(o.Z,{mdxType:"CppOverloadList"},(0,a.kt)(s.Z,{num:1,code:"[[nodiscard]] constexpr const_pointer c_str() const noexcept;",mdxType:"CppOverload"})),(0,a.kt)("p",null,"Returns a pointer to a null-terminated character array with data equivalent to those stored in the string. "),(0,a.kt)("h2",{id:"parameters"},"Parameters"),(0,a.kt)("p",null,"(none)"),(0,a.kt)("h2",{id:"return-value"},"Return value"),(0,a.kt)("p",null,"Pointer to the underlying character storage.\n",(0,a.kt)("inlineCode",{parentName:"p"},"c_str() + i == std::addressof(operator[](i))")," for every ",(0,a.kt)("inlineCode",{parentName:"p"},"i")," in ",(0,a.kt)("inlineCode",{parentName:"p"},"[0, size()]"),"."),(0,a.kt)("h2",{id:"complexity"},"Complexity"),(0,a.kt)("p",null,"Constant."),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)(c.Z,{link:"https://godbolt.org/z/fjo8rMs6j",mdxType:"LinkButton"},"Run this code!"),(0,a.kt)(d.Z,{className:"language-cpp",mdxType:"CodeBlock"},'#include <fixed_string.hpp>\n#include <cstring>\n#include <iostream>\n\nint main()\n{\n    constexpr const fixstr::fixed_string hello_world = "Hello, world!";\n    const char* const hw_data = hello_world.c_str();\n    \n    std::cout << "Terminating character: ";\n    if (const char terminating_character = *(hw_data + hello_world.size()); terminating_character == \'\\0\') {\n        std::cout << R"(\\0)";\n    } else {\n        std::cout << terminating_character;\n    }\n    std::cout << std::endl;\n    \n    constexpr const fixstr::fixed_string answer = "42";\n    std::cout << "The answer to The Ultimate Question of Life, the Universe, and Everything: "\n              << std::atoi(answer.c_str()) << \'\\n\';\n}'),"Output:",(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Terminating character: \\0\nThe answer to The Ultimate Question of Life, the Universe, and Everything: 42\n")))}_.isMDXComponent=!0}}]);