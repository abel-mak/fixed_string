"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[555],{8135:function(e,n,t){t.r(n),t.d(n,{contentTitle:function(){return u},default:function(){return g},frontMatter:function(){return p},metadata:function(){return m},toc:function(){return f}});var r=t(7462),i=t(3366),a=(t(7294),t(3905)),s=t(1848),c=t(8330),d=t(6354),o=t(6213),l=["components"],p={sidebar_position:13,sidebar_label:"rend & crend"},u="fixstr::basic_fixed_string::rend` <br/> `fixstr::basic_fixed_string::crend",m={unversionedId:"api/member-functions/rend",id:"api/member-functions/rend",isDocsHomePage:!1,title:"fixstr::basic_fixed_string::rend` <br/> `fixstr::basic_fixed_string::crend",description:"Returns a reverse iterator to the character following the last character of the reversed fixed string.",source:"@site/docs/api/member-functions/rend.mdx",sourceDirName:"api/member-functions",slug:"/api/member-functions/rend",permalink:"/fixed_string/docs/api/member-functions/rend",editUrl:"https://github.com/unterumarmung/fixed_string/edit/add-documentation/documentation/docs/api/member-functions/rend.mdx",version:"current",sidebarPosition:13,frontMatter:{sidebar_position:13,sidebar_label:"rend & crend"},sidebar:"tutorialSidebar",previous:{title:"rbegin & crbegin",permalink:"/fixed_string/docs/api/member-functions/rbegin"},next:{title:"substr",permalink:"/fixed_string/docs/api/member-functions/substr"}},f=[{value:"Parameters",id:"parameters",children:[]},{value:"Return value",id:"return-value",children:[]},{value:"Complexity",id:"complexity",children:[]},{value:"Example",id:"example",children:[]}],x={toc:f};function g(e){var n=e.components,p=(0,i.Z)(e,l);return(0,a.kt)("wrapper",(0,r.Z)({},x,p,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"fixstrbasic_fixed_stringrend--fixstrbasic_fixed_stringcrend"},(0,a.kt)("inlineCode",{parentName:"h1"},"fixstr::basic_fixed_string::rend")," ",(0,a.kt)("br",null)," ",(0,a.kt)("inlineCode",{parentName:"h1"},"fixstr::basic_fixed_string::crend")),(0,a.kt)(c.Z,{mdxType:"CppOverloadList"},(0,a.kt)(s.Z,{num:1,code:"[[nodiscard]] constexpr reverse_iterator rend() noexcept;",mdxType:"CppOverload"}),(0,a.kt)(s.Z,{num:2,code:"[[nodiscard]] constexpr const_reverse_iterator rend() const noexcept;",mdxType:"CppOverload"}),(0,a.kt)(s.Z,{num:3,code:"[[nodiscard]] constexpr const_reverse_iterator crend() const noexcept;",mdxType:"CppOverload"})),(0,a.kt)("p",null,"Returns a reverse iterator to the character following the last character of the reversed fixed string.\nIt corresponds to the character preceding the first character of the non-reversed fixed string.\nThis character acts as a placeholder, attempting to access it results in undefined behavior."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Image explaining reverse iterators",src:t(3388).Z})),(0,a.kt)("h2",{id:"parameters"},"Parameters"),(0,a.kt)("p",null,"(none)"),(0,a.kt)("h2",{id:"return-value"},"Return value"),(0,a.kt)("p",null,"Iterator to the character following the last character."),(0,a.kt)("h2",{id:"complexity"},"Complexity"),(0,a.kt)("p",null,"Constant."),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)(d.Z,{link:"https://godbolt.org/z/vMG5h3P3c",mdxType:"LinkButton"},"Run this code!"),(0,a.kt)(o.Z,{className:"language-cpp",mdxType:"CodeBlock"},'#include <algorithm>\n#include <fixed_string.hpp>\n#include <iostream>\n#include <iterator>\n#include <string>\n\nint main()\n{\n    fixstr::fixed_string s = "A man, a plan, a canal: Panama";\n    {\n        std::string c;\n        std::copy(s.rbegin(), s.rend(), std::back_inserter(c));\n        std::cout << c << \'\\n\'; // "amanaP :lanac a ,nalp a ,nam A"\n    }\n\n    {\n        std::string c;\n        std::copy(s.crbegin(), s.crend(), std::back_inserter(c));\n        std::cout << c << \'\\n\'; // "amanaP :lanac a ,nalp a ,nam A"\n    }\n}'),"Output:",(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"amanaP :lanac a ,nalp a ,nam A\namanaP :lanac a ,nalp a ,nam A\n")))}g.isMDXComponent=!0},3388:function(e,n,t){n.Z=t.p+"assets/images/range-rbegin-rend-db0c747050c57a1c52c778a92a214575.png"}}]);