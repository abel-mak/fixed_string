"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[16],{9740:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return m},default:function(){return h},frontMatter:function(){return c},metadata:function(){return l},toc:function(){return b}});var i=n(7462),s=n(3366),o=(n(7294),n(3905)),r=n(1848),a=n(8330),u=n(6354),p=n(6213),d=["components"],c={sidebar_position:14,sidebar_label:"substr"},m="fixstr::basic_fixed_string::substr",l={unversionedId:"api/member-functions/substr",id:"api/member-functions/substr",isDocsHomePage:!1,title:"fixstr::basic_fixed_string::substr",description:"Returns a substring [pos, pos+count).",source:"@site/docs/api/member-functions/substr.mdx",sourceDirName:"api/member-functions",slug:"/api/member-functions/substr",permalink:"/fixed_string/docs/api/member-functions/substr",editUrl:"https://github.com/unterumarmung/fixed_string/edit/add-documentation/documentation/docs/api/member-functions/substr.mdx",version:"current",sidebarPosition:14,frontMatter:{sidebar_position:14,sidebar_label:"substr"},sidebar:"tutorialSidebar",previous:{title:"rend & crend",permalink:"/fixed_string/docs/api/member-functions/rend"},next:{title:"find",permalink:"/fixed_string/docs/api/member-functions/find"}},b=[{value:"Parameters",id:"parameters",children:[]},{value:"Return value",id:"return-value",children:[]},{value:"Complexity",id:"complexity",children:[]},{value:"Example",id:"example",children:[]}],f={toc:b};function h(e){var t=e.components,n=(0,s.Z)(e,d);return(0,o.kt)("wrapper",(0,i.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"fixstrbasic_fixed_stringsubstr"},(0,o.kt)("inlineCode",{parentName:"h1"},"fixstr::basic_fixed_string::substr")),(0,o.kt)(a.Z,{mdxType:"CppOverloadList"},(0,o.kt)(r.Z,{num:1,code:"template <size_type pos = 0, size_type count = npos>\n    requires pos <= N\n[[nodiscard]] constexpr basic_fixed_string<TChar, M, TTraits> substr() const noexcept;",mdxType:"CppOverload"})),(0,o.kt)("p",null,"Returns a substring ",(0,o.kt)("inlineCode",{parentName:"p"},"[pos, pos+count)"),".\nIf the requested substring extends past the end of the string, i.e. the ",(0,o.kt)("inlineCode",{parentName:"p"},"count")," is greater than ",(0,o.kt)("inlineCode",{parentName:"p"},"size() - pos")," (e.g. if ",(0,o.kt)("inlineCode",{parentName:"p"},"count == npos"),"),\nthe returned substring is ",(0,o.kt)("inlineCode",{parentName:"p"},"[pos, size())"),"."),(0,o.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"note")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Note that ",(0,o.kt)("inlineCode",{parentName:"p"},"requires")," is used only in the documentation purposes.\nIn order to support C++17 the implementation uses SFINAE."))),(0,o.kt)("h2",{id:"parameters"},"Parameters"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"pos")," - position of the first character to include"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"count")," - length of the substring")),(0,o.kt)("h2",{id:"return-value"},"Return value"),(0,o.kt)("p",null,"String containing the substring ",(0,o.kt)("inlineCode",{parentName:"p"},"[pos, pos+count)")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"[pos, size())"),"."),(0,o.kt)("h2",{id:"complexity"},"Complexity"),(0,o.kt)("p",null,"Linear in ",(0,o.kt)("inlineCode",{parentName:"p"},"count"),"."),(0,o.kt)("h2",{id:"example"},"Example"),(0,o.kt)(u.Z,{link:"https://godbolt.org/z/svMnPhaE4",mdxType:"LinkButton"},"Run this code!"),(0,o.kt)(p.Z,{className:"language-cpp",mdxType:"CodeBlock"},"#include <fixed_string.hpp>\n#include <iostream>\n#include <string>\n\nint main()\n{\n    constexpr fixstr::fixed_string a = \"0123456789abcdefghij\";\n\n    // count is npos, returns [pos, size())\n    constexpr auto sub1 = a.template substr<10>();\n    std::cout << sub1 << '\\n';\n\n    // both pos and pos + count are within bounds, returns [pos, pos+count)\n    constexpr auto sub2 = a.template substr<5, 3>();\n    std::cout << sub2 << '\\n';\n\n    // pos is within bounds, pos+count is not, returns [pos, size())\n    constexpr auto sub4 = a.template substr<a.size() - 3, 50>();\n    // this is effectively equivalent to\n    // constexpr auto sub4 = a.substr<17, 3>();\n    // since a.size() == 20, pos == a.size() - 3 == 17, and a.size() - pos == 3\n\n    std::cout << sub4 << '\\n';\n\n    // pos is out of bounds, compile-time error\n    // constexpt auto sub5 = a.substr<a.size() + 3, 50>();\n}"))}h.isMDXComponent=!0}}]);