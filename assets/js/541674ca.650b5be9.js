"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[54],{1751:function(e,t,i){i.r(t),i.d(t,{contentTitle:function(){return l},default:function(){return h},frontMatter:function(){return m},metadata:function(){return u},toc:function(){return f}});var n=i(7462),s=i(3366),a=(i(7294),i(3905)),r=i(1848),o=i(8330),d=i(6354),c=i(6213),p=["components"],m={sidebar_position:8,sidebar_label:"size & length"},l="fixstr::basic_fixed_string::size` <br/> `fixstr::basic_fixed_string::length",u={unversionedId:"api/member-functions/size",id:"api/member-functions/size",isDocsHomePage:!1,title:"fixstr::basic_fixed_string::size` <br/> `fixstr::basic_fixed_string::length",description:"Returns the number of TChar elements in the fixed string, i.e. std::distance(begin(), end()).",source:"@site/docs/api/member-functions/size.mdx",sourceDirName:"api/member-functions",slug:"/api/member-functions/size",permalink:"/fixed_string/docs/api/member-functions/size",editUrl:"https://github.com/unterumarmung/fixed_string/edit/add-documentation/documentation/docs/api/member-functions/size.mdx",version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8,sidebar_label:"size & length"},sidebar:"tutorialSidebar",previous:{title:"empty",permalink:"/fixed_string/docs/api/member-functions/empty"},next:{title:"max_size",permalink:"/fixed_string/docs/api/member-functions/max_size"}},f=[{value:"Parameters",id:"parameters",children:[]},{value:"Return value",id:"return-value",children:[]},{value:"Complexity",id:"complexity",children:[]},{value:"Example",id:"example",children:[]}],x={toc:f};function h(e){var t=e.components,i=(0,s.Z)(e,p);return(0,a.kt)("wrapper",(0,n.Z)({},x,i,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"fixstrbasic_fixed_stringsize--fixstrbasic_fixed_stringlength"},(0,a.kt)("inlineCode",{parentName:"h1"},"fixstr::basic_fixed_string::size")," ",(0,a.kt)("br",null)," ",(0,a.kt)("inlineCode",{parentName:"h1"},"fixstr::basic_fixed_string::length")),(0,a.kt)(o.Z,{mdxType:"CppOverloadList"},(0,a.kt)(r.Z,{num:1,code:"[[nodiscard]] constexpr size_type size() const noexcept;",mdxType:"CppOverload"}),(0,a.kt)(r.Z,{num:2,code:"[[nodiscard]] constexpr size_type length() const noexcept;",mdxType:"CppOverload"})),(0,a.kt)("p",null,"Returns the number of ",(0,a.kt)("inlineCode",{parentName:"p"},"TChar")," elements in the fixed string, i.e. ",(0,a.kt)("inlineCode",{parentName:"p"},"std::distance(begin(), end())"),"."),(0,a.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"note")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"For ",(0,a.kt)("inlineCode",{parentName:"p"},"fixstr::fixed_string"),", the elements are bytes (objects of type ",(0,a.kt)("inlineCode",{parentName:"p"},"char"),"), which are not the same as characters if a multibyte encoding such as UTF-8 is used."))),(0,a.kt)("h2",{id:"parameters"},"Parameters"),(0,a.kt)("p",null,"(none)"),(0,a.kt)("h2",{id:"return-value"},"Return value"),(0,a.kt)("p",null,"The number of ",(0,a.kt)("inlineCode",{parentName:"p"},"TChar")," elements in the fixed string."),(0,a.kt)("h2",{id:"complexity"},"Complexity"),(0,a.kt)("p",null,"Constant."),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)(d.Z,{link:"https://godbolt.org/z/qq1GK9fMq",mdxType:"LinkButton"},"Run this code!"),(0,a.kt)(c.Z,{className:"language-cpp",mdxType:"CodeBlock"},'#include <fixed_string.hpp>\n#include <iterator>\n\nint main()\n{\n    fixstr::fixed_string s = "Exemplar";\n    static_assert(s.size() == 8);\n    static_assert(s.size() == s.length());\n    constexpr auto iterator_distance = static_cast<decltype(s)::size_type>(std::distance(s.begin(), s.end()));\n    static_assert(s.size() == iterator_distance);\n\n    fixstr::fixed_u32string a = U"\u30cf\u30ed\u30fc\u30fb\u30ef\u30fc\u30eb\u30c9"; // 8 code points\n    static_assert(a.size() == 8);                    // 8 code units in UTF-32\n\n    fixstr::fixed_u16string b = u"\u30cf\u30ed\u30fc\u30fb\u30ef\u30fc\u30eb\u30c9"; // 8 code points\n    static_assert(b.size() == 8);                    // 8 code units in UTF-16\n\n    fixstr::fixed_string c = "\u30cf\u30ed\u30fc\u30fb\u30ef\u30fc\u30eb\u30c9"; // 8 code points\n    static_assert(c.size() == 24);               // 24 code units in UTF-8\n\n#if __cplusplus >= 202002\n    fixstr::fixed_u8string d = u8"\u30cf\u30ed\u30fc\u30fb\u30ef\u30fc\u30eb\u30c9"; // 8 code points\n    static_assert(d.size() == 24);                   // 24 code units in UTF-8\n#endif\n}'))}h.isMDXComponent=!0}}]);