"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[172],{2480:function(t,e,n){n.r(e),n.d(e,{contentTitle:function(){return u},default:function(){return x},frontMatter:function(){return p},metadata:function(){return m},toc:function(){return f}});var a=n(7462),i=n(3366),r=(n(7294),n(3905)),o=n(1848),d=n(8330),s=n(6354),c=n(6213),l=["components"],p={sidebar_position:5,sidebar_label:"data"},u="fixstr::basic_fixed_string::data",m={unversionedId:"api/member-functions/data",id:"api/member-functions/data",isDocsHomePage:!1,title:"fixstr::basic_fixed_string::data",description:"Returns a pointer to the underlying array serving as character storage.",source:"@site/docs/api/member-functions/data.mdx",sourceDirName:"api/member-functions",slug:"/api/member-functions/data",permalink:"/fixed_string/docs/api/member-functions/data",editUrl:"https://github.com/unterumarmung/fixed_string/edit/add-documentation/documentation/docs/api/member-functions/data.mdx",version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5,sidebar_label:"data"},sidebar:"tutorialSidebar",previous:{title:"at",permalink:"/fixed_string/docs/api/member-functions/at"},next:{title:"front",permalink:"/fixed_string/docs/api/member-functions/front"}},f=[{value:"Parameters",id:"parameters",children:[]},{value:"Return value",id:"return-value",children:[]},{value:"Complexity",id:"complexity",children:[]},{value:"Example",id:"example",children:[]}],h={toc:f};function x(t){var e=t.components,n=(0,i.Z)(t,l);return(0,r.kt)("wrapper",(0,a.Z)({},h,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"fixstrbasic_fixed_stringdata"},(0,r.kt)("inlineCode",{parentName:"h1"},"fixstr::basic_fixed_string::data")),(0,r.kt)(d.Z,{mdxType:"CppOverloadList"},(0,r.kt)(o.Z,{num:1,code:"[[nodiscard]] constexpr pointer data() noexcept;",mdxType:"CppOverload"}),(0,r.kt)(o.Z,{num:2,code:"[[nodiscard]] constexpr const_pointer data() const noexcept;",mdxType:"CppOverload"})),(0,r.kt)("p",null,"Returns a pointer to the underlying array serving as character storage. "),(0,r.kt)("p",null,"The pointer is such that the range ",(0,r.kt)("inlineCode",{parentName:"p"},"[data(); data() + size()]"),"\nis valid and the values in it correspond to the values stored in the string. "),(0,r.kt)("p",null,"The returned array is null-terminated, that is, ",(0,r.kt)("inlineCode",{parentName:"p"},"data()")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"c_str()")," perform the same function."),(0,r.kt)("h2",{id:"parameters"},"Parameters"),(0,r.kt)("p",null,"(none)"),(0,r.kt)("h2",{id:"return-value"},"Return value"),(0,r.kt)("p",null,"A pointer to the underlying character storage.\n",(0,r.kt)("inlineCode",{parentName:"p"},"data() + i == std::addressof(operator[](i))")," for every ",(0,r.kt)("inlineCode",{parentName:"p"},"i")," in ",(0,r.kt)("inlineCode",{parentName:"p"},"[0, size()]"),"."),(0,r.kt)("h2",{id:"complexity"},"Complexity"),(0,r.kt)("p",null,"Constant."),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)(s.Z,{link:"https://godbolt.org/z/EPKfczx9o",mdxType:"LinkButton"},"Run this code!"),(0,r.kt)(c.Z,{className:"language-cpp",mdxType:"CodeBlock"},'#include <fixed_string.hpp>\n#include <iostream>\n#include <memory>\n\nint main()\n{\n    {\n        fixstr::fixed_string hw_s = "hello, world!";\n        char* const f = std::addressof(hw_s.front());\n        *f = \'H\';\n        std::cout << "data() after modification: " << hw_s.data() << \'\\n\'; // Hello, world!\n    }\n\n    {\n        constexpr const fixstr::fixed_string hw_c = "Hello, world!";\n        const char* const f = std::addressof(hw_c.front());\n        std::cout << std::boolalpha << "f == data(): " << (f == hw_c.data()) << \'\\n\'; \n    }\n}'),"Output:",(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"data() after modification: Hello, world!\nf == data(): true\n")))}x.isMDXComponent=!0}}]);