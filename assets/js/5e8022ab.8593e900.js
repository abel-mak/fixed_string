"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[539],{6929:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return u},default:function(){return k},frontMatter:function(){return l},metadata:function(){return m},toc:function(){return f}});var r=n(7462),o=n(3366),i=(n(7294),n(3905)),a=n(1848),s=n(8330),d=n(6354),p=n(6213),c=["components"],l={sidebar_position:3,sidebar_label:"operator[]"},u="fixstr::basic_fixed_string::operator[]",m={unversionedId:"api/member-functions/operator-at",id:"api/member-functions/operator-at",isDocsHomePage:!1,title:"fixstr::basic_fixed_string::operator[]",description:"Returns a reference to the character at specified location pos. No bounds checking is performed.",source:"@site/docs/api/member-functions/operator-at.mdx",sourceDirName:"api/member-functions",slug:"/api/member-functions/operator-at",permalink:"/fixed_string/docs/api/member-functions/operator-at",editUrl:"https://github.com/unterumarmung/fixed_string/edit/add-documentation/documentation/docs/api/member-functions/operator-at.mdx",version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,sidebar_label:"operator[]"},sidebar:"tutorialSidebar",previous:{title:"operator=",permalink:"/fixed_string/docs/api/member-functions/operator-assign"},next:{title:"at",permalink:"/fixed_string/docs/api/member-functions/at"}},f=[{value:"Parameters",id:"parameters",children:[]},{value:"Return value",id:"return-value",children:[]},{value:"Complexity",id:"complexity",children:[]},{value:"Example",id:"example",children:[]}],h={toc:f};function k(e){var t=e.components,n=(0,o.Z)(e,c);return(0,i.kt)("wrapper",(0,r.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"fixstrbasic_fixed_stringoperator"},(0,i.kt)("inlineCode",{parentName:"h1"},"fixstr::basic_fixed_string::operator[]")),(0,i.kt)(s.Z,{mdxType:"CppOverloadList"},(0,i.kt)(a.Z,{num:1,code:"[[nodiscard]] constexpr reference operator[](size_type pos);",mdxType:"CppOverload"}),(0,i.kt)(a.Z,{num:2,code:"[[nodiscard]] constexpr const_reference operator[](size_type pos) const;",mdxType:"CppOverload"})),(0,i.kt)("p",null,"Returns a reference to the character at specified location pos. No bounds checking is performed.\nIf ",(0,i.kt)("inlineCode",{parentName:"p"},"pos > size()"),", the behavior is undefined."),(0,i.kt)("p",null,"If ",(0,i.kt)("inlineCode",{parentName:"p"},"pos == size()"),", a reference to the character with value ",(0,i.kt)("inlineCode",{parentName:"p"},"TChar()")," (the null character) is returned."),(0,i.kt)("p",null,"For the first (non-const) version, the behavior is undefined if this character is modified to any value other than ",(0,i.kt)("inlineCode",{parentName:"p"},"TChar()"),"."),(0,i.kt)("h2",{id:"parameters"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"pos"),"\t-\tposition of the element to return")),(0,i.kt)("h2",{id:"return-value"},"Return value"),(0,i.kt)("p",null,"Reference to the requested element."),(0,i.kt)("h2",{id:"complexity"},"Complexity"),(0,i.kt)("p",null,"Constant."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)(d.Z,{link:"https://godbolt.org/z/ajTf6EbbW",mdxType:"LinkButton"},"Run this code!"),(0,i.kt)(p.Z,{className:"language-cpp",mdxType:"CodeBlock"},'#include <cctype>\n#include <fixed_string.hpp>\n#include <iostream>\n\nint main()\n{\n    fixstr::fixed_string str = "Hello, World!";\n    std::cout << str << std::endl;\n\n    str[0] = std::tolower(str[0]);\n    str[7] = std::tolower(str[7]);\n\n    std::cout << str << std::endl;\n\n    // [[maybe_unused]] const auto foo = str[25]; // Undefined behaviour: the index is out of range\n}'),"Output:",(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Hello, World!\nhello, world!\n")))}k.isMDXComponent=!0}}]);